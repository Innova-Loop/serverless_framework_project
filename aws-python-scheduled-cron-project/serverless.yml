service: aws-python-scheduled-cron-project

frameworkVersion: '3'

plugins:
  - serverless-plugin-datadog

custom:
  datadog:
    site: datadoghq.com
    apiKeySecretArn: ${ssm:/ServerlessFrameworkLambda/DD_API_KEY_SECRET_ARN}

provider:
  name: aws
  runtime: python3.8
  iam:
    role:
      name: ${sls:stage}-RdsSnapshotLambdaRole
      statements:
        - Effect: Allow
          Action:
            - 'rds:AddTagsToResource'
            - 'rds:CreateDBSnapshot'
            - 'rds:DeleteDBSnapshot'
            - 'rds:DescribeDBSnapshots'
            - 'rds:ModifyDBSnapshotAttribute'
            - 'ec2:CreateNetworkInterface'
            - 'ec2:DescribeNetworkInterfaces'
            - 'ec2:DeleteNetworkInterface'
          Resource: '*'
        - Effect: Allow
          Action:
            - 'sns:Publish'
          Resource: !Join [':', ['arn:aws:sns', !Ref AWS::Region, !Ref AWS::AccountId, !GetAtt RdsSnapshotNotifications.TopicName]]
  vpc:
    securityGroupIds:
      - ${ssm:/ServerlessFrameworkLambda/VPC_DEFAULT_SG}
    subnetIds:
      - ${ssm:/ServerlessFrameworkLambda/PRIVATE_SUBNET_1}
      - ${ssm:/ServerlessFrameworkLambda/PRIVATE_SUBNET_2}
  
functions:
  rdsSnapshot:
    name: ${sls:stage}-rds-snapshot-function
    handler: handler.lambda_handler
    timeout: 300
    environment:
      DB_IDENTIFIER: ${param:db_identifier}
      DB_REGION: ${param:db_region}
      SHARED_ACCOUNT: ${param:shared_account}
      TOPIC_ARN: !Join [':', ['arn:aws:sns', !Ref AWS::Region, !Ref AWS::AccountId, !GetAtt RdsSnapshotNotifications.TopicName]]
    events:
      - schedule: cron(00 10 ? * MON-FRI *)
	
resources: 
  extensions:
    RdsSnapshotLambdaFunction:
      DependsOn: 
      - RdsSnapshotNotifications
  Resources:
    RdsSnapshotNotifications:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: !Join [ "", [ '${sls:stage}', !Ref AWS::Region, 'RdsSnapshotNotifications']]
        Subscription: 
          - Endpoint: ${param:email_1}
            Protocol: email